#!/usr/bin/perl 

#
# snarkd
# run the snarkatron
#
# John Adams <jna@retina.net> 
# with lots of help from jwz <jwz@jwz.org>
#
# Permission to use, copy, modify, distribute, and sell this software and its 
# documentation for any purpose is hereby granted without fee, provided that 
# the above copyright notice appear in all copies and that both that 
# copyright notice and this permission notice appear in supporting 
# documentation.  No representations are made about the suitability of this 
# software for any purpose.  It is provided "as is" without express or  
# implied warranty. 
#
# Created: 11/2006
#

my $SNARKDIR;
use POSIX;

BEGIN {
$SNARKDIR = "/home/sign/snarkd";
unshift @INC, "$SNARKDIR/lib";
unshift @INC, "$SNARKDIR/lib/Config-INI-Simple-0.01/lib";
}
#use lib "$SNARKDIR/lib/Config-INI-Simple-0.01/lib";

my $SNARKDIR = "/home/sign/snarkd";
push @INC, "$SNARKDIR/lib";

use Config::INI::Simple;
use Net::Telnet;
use Text::Wrap;

my $DEBUG = 0;
my $lastmessage;

# Automatically delete entries from the snarkatron when 
# times shown > cnt
my $AUTODELETE = 1;

# where your config file is 
my $CONFIGFILE = "$SNARKDIR/snark.ini";

my $SNARKHOST="membrane.dnalounge.net";
my $SNARKPORT=10011;

# Must be set if using telnet interface
$PANELID="0";

# Must be after configuration or $PANELID won't be set. 
#require "snarklib.pl";

# -------------No user-servicable options beyond this point---------------

sub datawall_wipe() { 
    # wipe the display (default to 4 line display)
    my $ROW = 32;
    my $COL = 32;

    for ($ROW=32;$ROW<36;$ROW++) {
	my $header = "\001" . $PANELID . chr($ROW) . chr($COL);
	$t->print($header . "\017\004");
    }
}


sub isvalid_msg($) {
    my ($msgname) = @_;

    # return 1 if the msg is valid for display, or 0

    my @days = ('Su','M','Tu','W','Th','F','Sa');

    @tod = localtime(time);
    $today=$days[$tod[6]];

    # set lowest possible message priority.
    if ($conf->{sign}->{block} eq "pri1000") { 
	$lowpri = 1000;
    } else {
	$lowpri = 99999999;
    }

    print "[$msgname] validity check: Today=$today, Valid=" . $conf->{$msgname}->{days} . " " . $conf->{$msgname}->{"displayed"}. "/" . $conf->{$msgname}->{"cnt"} . " enable=" . $conf->{$msgname}->{enable} . "\n" if $DEBUG;

    if (($conf->{$msgname}->{days} =~ m/$today/) && ($conf->{$msgname}->{enable} == 1)) {
	# valid date
	if (($conf->{$msgname}->{displayed} < $conf->{$msgname}->{cnt}) ||
	    ($conf->{$msgname}->{cnt} == 0)) { 
	    if (( ($conf->{$msgname}->{hourfrm} <= $tod[2]) && ($conf->{$msgname}->{hourto} >= $tod[2])) &&
		( ($conf->{$msgname}->{minfrm} <= $tod[1]) && ($conf->{$msgname}->{minto} >= $tod[1])) ) { 
		if (($conf->{$msgname}->{enable} eq 1) && ($conf->{$msgname}->{priority} < $lowpri)) { 
		    print "[$msgname] OK for display.\n" if $DEBUG;
		    return 1;
		}
	    }
	  }
     }

    print "[$msgname] cannot be displayed - Msg disabled, not valid time, count, or day\n" if $DEBUG;
    return 0;
}


sub get_time() {
  my $s = strftime ("%r", localtime);
  $s =~ s/^0//s;
  return $s;
}

sub get_date() {
  return strftime ("%a, %e %b", localtime);
}

sub gettod() { 
    return(get_date() . ", " . get_time());
}


sub datawall_format($) {
    my ($msg) = @_;

    # format the incoming message so that it can be displayed on the datawall
    # TODO: Word Wrap (use perl lib?) 

    # these chars define the starting row/col position
    my $ROW = 32; 
    my $COL = 32; 

    # init row to zero 
    my $header = "\001" . $PANELID . chr($ROW) . chr($COL);
    my $msgout=$header;

    # make replacements for color and clear chars, as well as date/time

    $msg =~ s/%%C/\017/g;  # #### what's this?
    $msg =~ s/%%G/\035/g;
    $msg =~ s/%%R/\036/g;
    $msg =~ s/%%A/\037/g;
    $msg =~ s/%%X/\377/g;  

    $msg =~ s/%%B/\007/g;
    $msg =~ s/%%I/\032/g;  # #### what's this?
    $msg =~ s/%%E/\034/g;

    $msg =~ s/%%T/{ get_time() }/eg;
    $msg =~ s/%%D/{ get_date() }/eg;

    # state machine to process newlines, word wrap and row justify
    my $ins=0;
    my $rowtxt = "";

    foreach $byte (split //,$msg) {

	if ($ins eq 1 && $byte eq "n") { 
	    $ROW++;
	    $header = "\001" . $PANELID . chr($ROW) . chr($COL);
	    $msgout .= $rowtxt . "\004" .  $header;
	    $rowtxt = "";
	    $ins = 0;
	    next;
	}

	if ($ins eq 1 && $byte eq "\\") { 
	    $msgout .= '\\';
	    $ins = 0;
	    next;
	}
	
	if ($byte eq '\\') { 
	    $ins = 1;
	    next;
        }
	$rowtxt .= $byte; # the row w/o formatting
    }

    # still data in the buffer?
    if ($rowtxt ne "") { 
	$msgout .= $rowtxt . "\004" . $header;
    }
    return $msgout . "\004";
}


sub showmsg($) {
    my ($msgname) = @_;

    # assemble the command line and send the message to the display

    if ($conf->{$msgname}->{extcmd} ne "") { 
	# this is a major security hole, and I know it, but we want to be able
	# to support unix functions.
	my $extcmd = $conf->{$msgname}->{extcmd};
	$CMDOUT=`$extcmd`;
        $CMDOUT =~ s/\s+$//s;    # lose trailing whitespace
        $CMDOUT =~ s/\n/\\n/gs;   # convert real newlines to fake newlines
	$msgout = "$CMDOUT";
    } else {
	$msgout = $conf->{$msgname}->{message};
    }


    if ($lastmessage eq $conf->{$msgname}->{message}) {
        # nothing to do. 
	return;
    }

    # update the last 5 displayed hash and write the config before going to sleep
    $conf->{lastfive}->{msg5} = $conf->{lastfive}->{msg4};
    $conf->{lastfive}->{msg4} = $conf->{lastfive}->{msg3};
    $conf->{lastfive}->{msg3} = $conf->{lastfive}->{msg2};
    $conf->{lastfive}->{msg2} = $conf->{lastfive}->{msg1};
    $conf->{lastfive}->{msg1} = gettod() . "|$msgout";
    $conf->write($CONFIGFILE);

    print "Network Call for $msgname to $SNARKHOST $SNARKPORT...\n" if $DEBUG;
    if ($conf->{$msgname}->{wipe} eq 1) { 
      datawall_wipe();
    }
	
    my $output = datawall_format($msgout);

    $t->print($output);
    
    # Dwell
    print "Sleep..." .$conf->{$msgname}->{dwell} . " seconds.\n\n" if $DEBUG;
    sleep($conf->{$msgname}->{dwell} );

    # remove the next comment to reduce serial traffic.
    $lastmessage=$conf->{$msgname}->{message};
}


sub show_static() {
    # show static message
    print "(STATIC) Pick: " . $conf->{sign}->{staticmsg} . "\n" if $DEBUG;
	
    if ($conf->{$msgname}->{wipe} eq 1) { 
      datawall_wipe();
    }
      
    my $output = datawall_format($msgout);
    $t->print($output);
    
    # sleep for a bit and see if there's more work to do.
    sleep(1);
}


sub show_next_cycle() {
    # cycle through messages
    my $pick = $lastshown++;
    my $msgname= $msgids[$pick+1];

    # handle autodelete...
    if (($conf->{$msgname}->{displayed} >= $conf->{$msgname}->{cnt}) &&
	($conf->{$msgname}->{cnt} != 0)) {
	if ($AUTODELETE == 1) { 
	    print "AUTODELETE: $msgname\n" if $DEBUG;
	    # delete the member.
	    delete $conf->{$msgname};
	    $conf->write($CONFIGFILE) || die "can't write $CONFIGFILE: $!";
	}
    }

    # has this message expired? 
    if (($AUTODELETE == 1) &&
	(time() > $conf->{$msgname}->{destroyat}) &&
	($conf->{$msgname}->{destroyat} != 0)) {
      delete $conf->{$msgname};
      $conf->write($CONFIGFILE) || die "can't write $CONFIGFILE: $!";
    }
	

    if (isvalid_msg($msgname)) { 
	# valid time - we are go
	print "(CYCLE) Pick: $msgname = " . $conf->{$msgname}->{message}. "\n" if $DEBUG;
	
	# must update before going to sleep or contention with admin occurs.
	    
	$conf->reset;
	$conf->read($CONFIGFILE);		    
	$conf->{$msgname}->{displayed}++;
	
	$conf->{status}->{lastshown} = $msgname;
	$conf->{status}->{lastshown} =~ s/^message//;
	
	showmsg($msgname);
    }
    if ($lastshown >= $#msgids) { $lastshown = 0; }
}


sub show_next_random() {
    # show one random message
    my $pick = int((rand()*($#msgids)));
    my $msgname= $msgids[$pick+1];

    srand;

    print "(RANDOM) Pick: $msgname = " . $conf->{$msgname}->{message}. "\n" if $DEBUG;

    # handle autodelete...
    if (($conf->{$msgname}->{displayed} >= $conf->{$msgname}->{cnt}) &&
	($conf->{$msgname}->{cnt} != 0)) {
	if ($AUTODELETE == 1) { 
	    print "AUTODELETE: $msgname\n" if $DEBUG;
	    # delete the member.
	    delete $conf->{$msgname};
	    $conf->write($CONFIGFILE) || die "can't write $CONFIGFILE: $!";
	}
    }

    if (isvalid_msg($msgname)) {
	# must update before going to sleep or contention with admin occurs.
	
	$conf->reset;
	$conf->read($CONFIGFILE);		    
	$conf->{$msgname}->{displayed}++;
	$conf->write($CONFIGFILE);		    

	$conf->{status}->{lastshown} = $msgname;
	$conf->{status}->{lastshown} =~ s/^message//;
	
	showmsg($msgname);
    }
}


sub main()
{

  # load in config
  $conf = new Config::INI::Simple;
  my $lastshown = $conf->{status}->{lastshown};

  print "Connecting...\n";
  $t = new Net::Telnet (Timeout => 3,
                        Host => $SNARKHOST,
                        Port => $SNARKPORT,
                        Binmode => 1,
                        Telnetmode => 0,
                        Output_record_separator => '',
                       );

  # have to wait for connection to set up.
  sleep 1;

  print "Connected!\n";

  # ---MAIN LOOP---
  while (1) { 
    print "--> LOAD CONFIG: " if $DEBUG;

    $conf = new Config::INI::Simple;
    $conf->reset;
    $conf->read($CONFIGFILE);
    
    @msgids = undef;

    # sort messages by message ID and then priority
    foreach my $k (sort {
	my @a = $a =~ /message(\d+)/;
	my @b = $b =~ /message(\d+)/;
	$conf->{$a}->{priority} <=> $conf->{$b}->{priority}  ||
	$a[0] <=> $b[0]

	} keys %{$conf}) { 
	
	if ($k =~ /^message(\d+)/) { 
	    push @msgids,$k;
	}	
    }
    
    print "Loaded: " . $#msgids . " Messages.\n" if $DEBUG;

    # What mode are we in?
    if ($conf->{sign}->{mode} eq "") { 
	print STDERR "You haven't configured a mode. Go configure the Snark!\n";
	exit;
    }

    # display one message 
    if ($conf->{sign}->{mode} eq 0) { if ($DEBUG) { print "Sign is off!\n"; } datawall_wipe(); sleep 5; } 
    if ($conf->{sign}->{mode} eq 1) { show_static(); }
    if ($conf->{sign}->{mode} eq 2) { show_next_cycle(); }
    if ($conf->{sign}->{mode} eq 3) { show_next_random(); }
  }
}


main();
exit(0);

